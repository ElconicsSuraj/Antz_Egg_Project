#include <Arduino.h>
#include "HX711.h"
#include <LiquidCrystal_I2C.h>
#include <freertos/task.h>

HX711 scale;
LiquidCrystal_I2C lcd(0x27, 20, 4);  // set the LCD address to 0x27 for a 20 chars and 4 lines display

const int LOADCELL_DOUT_PIN = 16;
const int LOADCELL_SCK_PIN = 4;
const int BUTTON_PIN = 5;
const unsigned long DEBOUNCE_DELAY = 50;

volatile bool buttonPressed = false;
unsigned long lastDebounceTime = 0;

String currentLine2 = ""; // Track the current characters on line 2 of the LCD

void Task1(void *pvParameters);
void Task2(void *pvParameters);

TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;

SemaphoreHandle_t lcdSemaphore;

void setup() {
  lcd.begin();
  Serial.begin(9600);

  lcdSemaphore = xSemaphoreCreateMutex();

  xTaskCreatePinnedToCore(
    Task1,
    "Task1",
    5000,
    NULL,
    1,
    &Task1Handle,
    0 // Run on core 0
  );

  xTaskCreatePinnedToCore(
    Task2,
    "Task2",
    5000,
    NULL,
    2,
    &Task2Handle,
    1 // Run on core 1
  );
}

void loop() {
  // Empty, because we are using FreeRTOS tasks
}

void Task1(void *pvParameters) {
  (void) pvParameters;

  Serial.println("Initializing the LCD");
  lcd.begin();
  lcd.clear();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("ANTZ Egg Module!");

  // Initialize the scale
  Serial.println("Initializing the scale");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(1841);
  scale.tare();
  lcd.setCursor(0, 1);
  lcd.print("Tare To 0");
  delay(1000);
  lcd.clear();

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonISR, FALLING);

  while (1) {
    Serial.println("Task 1 is running");

    if (buttonPressed) {
      tare();
      buttonPressed = false;
    }

    scale.power_down();
    delay(500);
    scale.power_up();

    double weight = scale.get_units(10); // Get weight in double floating point
    Serial.print("Weight:\t");
    Serial.println(weight, 2); // Print weight with 2 decimal places
   

    if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
      if (weight<3.0 )
      {
        weight =0;
        }
      lcd.setCursor(0, 0);
      lcd.print("Weight: " + String(weight, 2) + " gm "); // Ensure to clear the remaining part of the line
      
      xSemaphoreGive(lcdSemaphore);
      
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void Task2(void *pvParameters) {
  (void) pvParameters;

  pinMode(2, OUTPUT); // Set pin 2 as an output
  
  Serial.println("Task 2 is created"); // Debugging statement to check if Task 2 is created

  while (1) {
    // Use ulTaskNotifyTake to wait until Task2 is notified to run
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

    Serial.println("Task 2 is running"); // Debugging statement to check if Task 2 is running
    
    if (Serial.available()) {
      Serial.println("Serial data available"); // Debugging statement to check if serial data is available

      // Set pin 2 high
      digitalWrite(2, HIGH);

      String newData = ""; // Track the new data received from serial
      
      while (Serial.available()) {
        char incomingChar = Serial.read();
        newData += incomingChar;
      }
      
      // Ensure newData fits within the LCD line limit (20 characters)
      if (newData.length() > 20) {
        newData = newData.substring(0, 20);
      }

      currentLine2 = newData; // Update the current content of line 2

      if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
        // Clear line 2 before printing new data
        lcd.setCursor(0, 2);
        lcd.print("                    "); // 20 spaces to clear the line

        lcd.setCursor(0, 2);
        lcd.print(currentLine2);
        xSemaphoreGive(lcdSemaphore);
      }

      // Set pin 2 low after processing data
      digitalWrite(2, LOW);
    }
  }
}

void tare() {
  if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
    scale.tare();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tare To 0");
    delay(1000);
    ESP.restart();
    lcd.clear();
    xSemaphoreGive(lcdSemaphore);
  }
}

void buttonISR() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
    buttonPressed = true;
  }
  lastDebounceTime = currentMillis;
}

// ISR to notify Task2 when serial data is available
void serialEvent() {
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  vTaskNotifyGiveFromISR(Task2Handle, &xHigherPriorityTaskWoken);
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
