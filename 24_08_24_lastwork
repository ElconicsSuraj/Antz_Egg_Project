#include <Arduino.h>
#include "HX711.h"
#include <freertos/task.h>
#include <Nextion.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ArduinoJson.h>
#include <WiFiManager.h>

// HX711 load cell
HX711 scale;

// Nextion display
NexText t0 = NexText(1, 3, "a0");
NexText t1 = NexText(1, 4, "a1");
NexText t2 = NexText(1, 5, "a2");
NexText t9 = NexText(3, 26, "t9");
NexButton b1_1 = NexButton(1, 6, "b1"); // Tare button on page 1 with id 6 and object name b1

// Nextion button objects for page 2
NexButton b0 = NexButton(2, 1, "b0");
NexButton b1 = NexButton(2, 2, "b1");
NexButton b2 = NexButton(2, 3, "b2");
NexButton b3 = NexButton(2, 4, "b3");
NexButton b4 = NexButton(2, 5, "b4");
NexButton b5 = NexButton(2, 6, "b5");
NexButton b6 = NexButton(2, 7, "b6");
NexButton b7 = NexButton(2, 8, "b7");
NexButton b8 = NexButton(2, 9, "b8");
NexButton b9 = NexButton(2, 10, "b9");
NexButton b10 = NexButton(2, 11, "b10"); // OK Button
NexButton b11 = NexButton(2, 12, "b11"); // Backspace
NexButton b12 = NexButton(2, 14, "b13"); // DELETE
NexButton b13 = NexButton(2, 13, "b12"); // Backslash

// Define the list of touch event objects to listen to
NexTouch *nex_listen_list[] = {
    &b0, &b1, &b2, &b3, &b4, &b5, &b6, &b7, &b8, &b9, &b10, &b11, &b12, &b13, &b1_1, NULL};

// Variable to track the current page
int currentPage = 0; // Default to page 0

// Initialize LED pin for example purposes
const int ledPin = 2;
const int LOADCELL_DOUT_PIN = 16;
const int LOADCELL_SCK_PIN = 4;
const int BUTTON_PIN = 5;
const unsigned long DEBOUNCE_DELAY = 50;

volatile bool buttonPressed = false;
unsigned long lastDebounceTime = 0;

// Variable to store the entered number
String enteredNumber = "";
double storedWeight;
String storedLength;
String storedBreadth;

// Task handles
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;
TaskHandle_t EnterNumberTaskHandle = NULL;
TaskHandle_t SendDataTaskHandle = NULL;

SemaphoreHandle_t lcdSemaphore;

// Callback functions for button press events
void b0PopCallback(void *ptr) {
  enteredNumber += "1";
  Serial.println("Button 1 pressed");
  vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}

// Define the other callback functions similarly...

// Tare button callback function
void b1_1PopCallback(void *ptr) {
  Serial.println("Tare button pressed");
  tare();
}

// Page change callback functions
void page0ShowCallback(void *ptr) {
  currentPage = 0;
  Serial.println("Page 0 shown");
}

void page1ShowCallback(void *ptr) {
  currentPage = 1;
  Serial.println("Page 1 shown");
}

void page2ShowCallback(void *ptr) {
  currentPage = 2;
  Serial.println("Page 2 shown");
}

// WiFi credentials
const char *serverName = "https://app.antzsystems.com/api/v1/iot/update/egg/weight";

// NTP client settings
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000); // Update every minute

String getFormattedDateTime() {
  time_t rawTime = timeClient.getEpochTime();
  struct tm *timeInfo;
  char buffer[30];

  timeInfo = gmtime(&rawTime); // Get the time in UTC
  strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%SZ", timeInfo); // Format time as ISO 8601

  return String(buffer);
}

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, 15, 17);  // RX pin 15, TX pin 17
  Serial.println("Serial2 initialized");

  delay(2000);
  changePage(2); // Start on page 2
  Serial.println("Access point mode page1");

  // Initialize Nextion display
  nexInit();

  // Attach button callbacks
  b0.attachPop(b0PopCallback);
  b1.attachPop(b1PopCallback2);
  b2.attachPop(b2PopCallback);
  // Attach all other button callbacks similarly...

  lcdSemaphore = xSemaphoreCreateMutex();

  // WiFi Manager Accesspoint and station mode
  WiFiManager manager;
  bool success = manager.autoConnect("Config Egg Module");

  if (success == 1) {
    changePage(0); // Start on page 0
    Serial.println("Station mode page1");
  }

  // Initialize NTP client
  timeClient.begin();
  timeClient.update();

  // Create FreeRTOS tasks
  xTaskCreatePinnedToCore(Task1, "Task1", 10000, NULL, 1, &Task1Handle, 0);
  xTaskCreatePinnedToCore(Task2, "Task2", 10000, NULL, 2, &Task2Handle, 1);
  xTaskCreatePinnedToCore(EnterNumberTask, "EnterNumberTask", 8000, NULL, 1, &EnterNumberTaskHandle, 0);
  xTaskCreatePinnedToCore(SendDataTask, "SendDataTask", 8000, NULL, 1, &SendDataTaskHandle, 1);

  // Suspend EnterNumberTask initially
  vTaskSuspend(EnterNumberTaskHandle);
}

void loop() {
  // Listen for touch events
  nexLoop(nex_listen_list);
}

// Implement the rest of your functions...

void changePage(int pageID) {
  String command = "page " + String(pageID);
  sendCommand(command);
}

void sendCommand(String command) {
  Serial2.print(command);  // Use Serial2 to communicate with the Nextion display
  Serial2.write(0xFF);     // End of command
  Serial2.write(0xFF);
  Serial2.write(0xFF);
}
