#include <Arduino.h>
#include "HX711.h"
#include <freertos/task.h>
#include <Nextion.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ArduinoJson.h>
#include <WiFiManager.h>

// HX711 load cell
HX711 scale;

// Nextion display
NexText t0 = NexText(1, 3, "a0");
NexText t1 = NexText(1, 4, "a1");
NexText t2 = NexText(1, 5, "a2");
NexText t9 = NexText(3, 26, "t9");
NexButton b1_1 = NexButton(1, 6, "b1"); // Tare button on page 1 with id 6 and object name b1

// Nextion button objects for page 2
NexButton b0 = NexButton(2, 1, "b0");
NexButton b1 = NexButton(2, 2, "b1");
NexButton b2 = NexButton(2, 3, "b2");
NexButton b3 = NexButton(2, 4, "b3");
NexButton b4 = NexButton(2, 5, "b4");
NexButton b5 = NexButton(2, 6, "b5");
NexButton b6 = NexButton(2, 7, "b6");
NexButton b7 = NexButton(2, 8, "b7");
NexButton b8 = NexButton(2, 9, "b8");
NexButton b9 = NexButton(2, 10, "b9");
NexButton b10 = NexButton(2, 11, "b10");// OK Button
NexButton b11 = NexButton(2, 12, "b11"); // backspace
NexButton b12 = NexButton(2, 14, "b13"); // DELETE
NexButton b13 = NexButton(2, 13, "b12");  // backslash

// NexPage objects for page change tracking
//NexPage page0 = NexPage(0, 0, "page0");
//NexPage page1 = NexPage(1, 0, "page1");
//NexPage page2 = NexPage(2, 0, "page2");
//NexPage page4 = NexPage(4, 0, "page4"); // Page 4 for AP mode
//NexPage page5 = NexPage(5, 0, "page5"); // Page 5 for Station mode

// Variable to track the current page
int currentPage = 0; // Default to page 0

// Initialize LED pin for example purposes
const int ledPin = 2;
const int LOADCELL_DOUT_PIN = 16;
const int LOADCELL_SCK_PIN = 4;
const int BUTTON_PIN = 5;
const unsigned long DEBOUNCE_DELAY = 50;

volatile bool buttonPressed = false;
unsigned long lastDebounceTime = 0;

// Variable to store the entered number
String enteredNumber = "";
double storedWeight;
String storedLength;
String storedBreadth;

// Task handles
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;
TaskHandle_t EnterNumberTaskHandle = NULL;
TaskHandle_t SendDataTaskHandle = NULL;

SemaphoreHandle_t lcdSemaphore;

// Callback functions for button press events
void b0PopCallback(void *ptr) {
  enteredNumber += "1";
  // // serial.println("Button 1 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b1PopCallback2(void *ptr) {
  enteredNumber += "2";
  // serial.println("Button 2 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b2PopCallback(void *ptr) {
  enteredNumber += "3";
  // serial.println("Button 3 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b3PopCallback(void *ptr) {
  enteredNumber += "4";
  // serial.println("Button 4 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b4PopCallback(void *ptr) {
  enteredNumber += "5";
  // serial.println("Button 5 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b5PopCallback(void *ptr) {
  enteredNumber += "6";
  // serial.println("Button 6 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b6PopCallback(void *ptr) {
  enteredNumber += "7";
  // serial.println("Button 7 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b7PopCallback(void *ptr) {
  enteredNumber += "8";
  // serial.println("Button 8 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b8PopCallback(void *ptr) {
  enteredNumber += "9";
  // serial.println("Button 9 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b9PopCallback(void *ptr) {
  enteredNumber += "0";
  // serial.println("Button 0 pressed");
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
}
void b10PopCallback(void *ptr) {  // OK Button
  // serial.print("OK Button pressed, entered number: ");
  // serial.println(enteredNumber);
   vTaskResume(Task1Handle);
  vTaskResume(Task2Handle);
  xTaskNotifyGive(SendDataTaskHandle); // Notify the SendDataTask to run
}
void b11PopCallback(void *ptr) { // Backspace
  if (enteredNumber.length() > 0) {
    enteredNumber.remove(enteredNumber.length() - 1);
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
    // serial.print("Backspace pressed, new number: ");
    // serial.println(enteredNumber);
  }
}
void b12PopCallback(void *ptr) { // Delete entered value
  enteredNumber = "";
  t9.setText("");
   vTaskResume(Task1Handle);
  vTaskResume(Task2Handle);
  // serial.println("Delete pressed, entered number cleared");
}
void b13PopCallback(void *ptr) {
  enteredNumber += "/";
   vTaskSuspend(Task1Handle);
  vTaskSuspend(Task2Handle);
  // serial.println("Backslash added");
}

// Tare button callback function
void b1_1PopCallback(void *ptr) {
  // serial.println("Tare button pressed");
  tare();
}

void b1PushCallback(void *ptr) {
  // serial.println("Tare button pressed");
  tare();
}

//// Page change callback functions
//void page0ShowCallback(void *ptr) {
//  currentPage = 0;
//  // serial.println("Page 0 shown");
//}
//
//void page1ShowCallback(void *ptr) {
//  currentPage = 1;
//  // serial.println("Page 1 shown");
//}
//
//void page2ShowCallback(void *ptr) {
//  currentPage = 2;
//  // serial.println("Page 2 shown");
//}

NexTouch *nex_listen_list[] = {
 &b1_1, &b0, &b1, &b2, &b3, &b4, &b5, &b6, &b7, &b8, &b9, &b10, &b11, &b12,&b13,
  NULL
};  // Array of Nextion touch objects

// WiFi credentials
const char* ssid = "Elconics";
const char* password = "Elconics@123";

// API endpoint
const char* serverName = "https://app.antzsystems.com/api/v1/iot/update/egg/weight";

// NTP client settings
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000); // Update every minute

String getFormattedDateTime() {
  time_t rawTime = timeClient.getEpochTime();
  struct tm *timeInfo;
  char buffer[30];

  timeInfo = gmtime(&rawTime); // Get the time in UTC
  strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%SZ", timeInfo); // Format time as ISO 8601

  return String(buffer);
}

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, 15, 17);  // RX pin 16, TX pin 17
  // serial.println("Serial2 initialized");

  // Initialize Nextion display
  nexInit();

//  // Attach page change callbacks
//  page0.attachPush(page0ShowCallback);
//  page1.attachPush(page1ShowCallback);
//  page2.attachPush(page2ShowCallback);

  // Attach tare button callback
  b1_1.attachPop(b1_1PopCallback);

  // Attach Nextion button callbacks for page 2
  b0.attachPop(b0PopCallback);
  b1.attachPop(b1PopCallback2);
  b2.attachPop(b2PopCallback);
  b3.attachPop(b3PopCallback);
  b4.attachPop(b4PopCallback);
  b5.attachPop(b5PopCallback);
  b6.attachPop(b6PopCallback);
  b7.attachPop(b7PopCallback);
  b8.attachPop(b8PopCallback);
  b9.attachPop(b9PopCallback);
  b10.attachPop(b10PopCallback);
  b11.attachPop(b11PopCallback);
  b12.attachPop(b12PopCallback);
  b13.attachPop(b13PopCallback);

  lcdSemaphore = xSemaphoreCreateMutex();

  // WiFi Manager Accesspoint and station mode
  WiFiManager manager;


  // WiFi Manager Accesspoint and station mode
  page_3();
//  WiFiManager manager;

  bool success = manager.autoConnect("Config Egg Module");

  

  if (success == 0) {
    // serial.println("Failed to connect");
    page_3();
  } else {
    // serial.println("Connected");
    page_0();
     // serial.println("Device is in Station mode, navigating to page 5");
 
  }

//  bool success = manager.autoConnect("Config Egg Module");

  



//  // Check if in Access Point mode or Station mode
//  if (WiFi.getMode() == WIFI_MODE_AP) {
//    // serial.println("Device is in Access Point mode, navigating to page 4");
//    page4.show(); // Assuming page4 is your AP mode page
//  } else if (WiFi.getMode() == WIFI_MODE_STA) {
//    // serial.println("Device is in Station mode, navigating to page 5");
//    page5.show(); // Assuming page5 is your Station mode page
//  }

  // Initialize NTP client
  timeClient.begin();
  timeClient.update();

  // Create FreeRTOS tasks
  xTaskCreatePinnedToCore(
    Task1,
    "Task1",
    10000,  // Increased stack size
    NULL,
    1,
    &Task1Handle,
    0 // Run on core 0
  );

  xTaskCreatePinnedToCore(
    Task2,
    "Task2",
    10000,  // Increased stack size
    NULL,
    2,
    &Task2Handle,
    1 // Run on core 1
  );

  xTaskCreatePinnedToCore(
    EnterNumberTask,    // Task function
    "EnterNumberTask",  // Name of the task
    8000,               // Increased stack size
    NULL,               // Task input parameter
    1,                  // Priority of the task
    &EnterNumberTaskHandle, // Task handle
    0);                 // Core to run the task

  xTaskCreatePinnedToCore(
    SendDataTask,       // Task function
    "SendDataTask",     // Name of the task
    8000,               // Increased stack size
    NULL,               // Task input parameter
    1,                  // Priority of the task
    &SendDataTaskHandle,// Task handle
    1);                 // Core to run the task

  // Suspend EnterNumberTask initially
  vTaskSuspend(EnterNumberTaskHandle);
}

void loop() {
  // Listen for touch events
  nexLoop(nex_listen_list);
}

void Task1(void *pvParameters) {
  (void) pvParameters;

  // Initialize the scale
  // serial.println("Initializing the scale");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(1990);
  scale.tare();

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonISR, FALLING);

  while (1) {
    // serial.println("Task 1 is running");
    nexLoop(nex_listen_list);  // Check for any button presses on the Nextion display
    if (buttonPressed) {
      tare();
      // serial.println("Button Pressed Tare");
      buttonPressed = false;
    }

    scale.power_down();
    delay(500);
    scale.power_up();

    double weight = scale.get_units(10); // Get weight in double floating point
    // serial.print("Weight:\t");
    // serial.println(weight, 0); // Print weight with 2 decimal places
    storedWeight=weight;
    if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
      if (weight < 3.0) {
        weight = 0;
      }

      t2.setText(String(weight, 0).c_str());

      xSemaphoreGive(lcdSemaphore);
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void Task2(void *pvParameters) {
  (void) pvParameters;

  pinMode(2, OUTPUT); // Set pin 2 as an output

  // serial.println("Task 2 is created"); // Debugging statement to check if Task 2 is created

  while (1) {
    // Use ulTaskNotifyTake to wait until Task2 is notified to run
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

    // serial.println("Task 2 is running"); // Debugging statement to check if Task 2 is running

    if (Serial.available()) {
      // serial.println("Serial data available"); // Debugging statement to check if serial data is available

      // Set pin 2 high
      digitalWrite(2, HIGH);

      String newData = ""; // Track the new data received from serial

      while (Serial.available()) {
        char incomingChar = Serial.read();
        newData += incomingChar;
        delay(10);  // Give some time for all characters to arrive
      }

      // serial.println("Received: " + newData); // Debugging print

      // Ensure newData fits within the display line limit
      if (newData.length() > 20) {
        newData = newData.substring(0, 20);
      }

      // Parse the received data
      int length = 0;
      int breadth = 0;

      // Find the positions of "L" and "B" keywords
      int lengthStart = newData.indexOf('L') + 2;
      int lengthEnd = newData.indexOf('B') - 1;
      int breadthStart = newData.indexOf('B') + 2;

      if (lengthStart > 1 && lengthEnd > lengthStart && breadthStart > lengthEnd) {
        // Extract substrings for length and breadth
        String lengthStr = newData.substring(lengthStart, lengthEnd);
        storedLength = lengthStr;
        String breadthStr = newData.substring(breadthStart);
        //storedBreadth = breadthStr;

        // Convert the substrings to integers
        length = lengthStr.toInt();
        breadth = breadthStr.toInt();
        storedBreadth=breadth;
        storedLength = length;
      }

      // Print the results
      // serial.print("Length: ");
      // serial.println(length);
      // serial.print("Breadth: ");
      // serial.println(breadth);

      if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
        // Ensure the text is set only on the correct page
        t0.setText(String(length).c_str());
        t1.setText(String(breadth).c_str());
        xSemaphoreGive(lcdSemaphore);
      }

      // Set pin 2 low after processing data
      digitalWrite(2, LOW);
    }
  }
}

void EnterNumberTask(void * parameter) {
  while (true) {
    // Wait for notification from main loop
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    // serial.println("EnterNumberTask is running");

    // Store the current weight in storedWeight
    //storedWeight = scale.get_units(10);
    // serial.print("Stored Weight: ");
    // serial.println(storedWeight);

    // Simulate some work by delaying
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void SendDataTask(void * parameter) {
  while (true) {
    // Wait for notification from the EnterNumberTask
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;

      http.begin(serverName);
      http.addHeader("Content-Type", "application/json");

      // Prepare JSON payload
      StaticJsonDocument<200> doc;
      doc["egg_code"] = enteredNumber; // Use entered number as egg_code

      String formattedDate = getFormattedDateTime(); // Get the current time from NTP

      JsonObject weight = doc.createNestedObject("weight");
      weight["value"] = storedWeight; // Use stored weight value
      weight["event_date"] = formattedDate; // Use current time from NTP server

      JsonObject length = doc.createNestedObject("length");
      length["value"] = storedLength; // Use stored length value
      length["event_date"] = formattedDate; // Use current time from NTP server

      JsonObject width = doc.createNestedObject("width");
      width["value"] = storedBreadth; // Use stored breadth value
      width["event_date"] = formattedDate; // Use current time from NTP server

      String requestBody;
      serializeJson(doc, requestBody);

      // serial.print("Sending JSON Payload: ");
      // serial.println(requestBody); // Print the JSON payload

      int httpResponseCode = http.POST(requestBody);

      if (httpResponseCode > 0) {
        String response = http.getString();
        // serial.println(httpResponseCode);
        // serial.println(response);
        String message = "Success ID:" + String(enteredNumber);
         t9.setText(message.c_str());
          

      } else {
        // serial.print("Error on sending POST: ");
        // serial.println(httpResponseCode);
                String message = "Fail ID " + String(enteredNumber);
         t9.setText(message.c_str());
      }

      http.end();
    } else {
      // serial.println("WiFi Disconnected");
    }

    enteredNumber = ""; // Reset entered number after sending
  }
}

void tare() {
  if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
    scale.tare();
    t2.setText("Tare");
    delay(1000);
    xSemaphoreGive(lcdSemaphore);
  }
}

void buttonISR() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
    buttonPressed = true;
  }
  lastDebounceTime = currentMillis;
}

// ISR to notify Task2 when serial data is available
void serialEvent() {
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  vTaskNotifyGiveFromISR(Task2Handle, &xHigherPriorityTaskWoken);
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

void page_0()
{

    // Switch to Page 0 using direct command
    Serial2.print("page 0");
    Serial2.write(0xFF); // End of command
    Serial2.write(0xFF); // End of command
    Serial2.write(0xFF); // End of command

    // serial.println("Switched to Page 0");
}

void page_3()
{

    // Switch to Page 0 using direct command
    Serial2.print("page 3");
    Serial2.write(0xFF); // End of command
    Serial2.write(0xFF); // End of command
    Serial2.write(0xFF); // End of command

    // serial.println("Switched to Page 3");
}
