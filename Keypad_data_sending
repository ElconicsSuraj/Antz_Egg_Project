#include "Keypad.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ArduinoJson.h>
#include "time.h"
#include <LiquidCrystal_I2C.h>

String Time();
const char* ssid = "Sonu";
const char* password = "1234567#";
const char* serverName = "http://app.antzsystems.com/api/v1/iot/enclosure/metric/update"; // Use HTTP (insecure)

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 0;
const int daylightOffset_sec = 19800;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, ntpServer);

String currentDate;
String id = "";

void update_data(String id, String type);

const byte ROWS = 4; // number of rows
const byte COLS = 4; // number of columns
char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {13, 14, 27, 26}; // row pinouts of the keypad R1 = D8, R2 = D7, R3 = D6, R4 = D5
byte colPins[COLS] = {25,33,32,5}; // column pinouts of the keypad C1 = D4, C2 = D3, C3 = D2
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const char passcode[] = "7981";
char inputBuffer[5]; // Buffer to store input characters + '\0'

const int buzzerPin = 2;

// LCD Display Configuration
LiquidCrystal_I2C lcd(0x27, 16, 2); // Set the LCD address to 0x27 for a 16 chars and 2 line display

void buzz(int buzzCount = 1) {
    for (int i = 0; i < buzzCount; ++i) {
        digitalWrite(buzzerPin,50);
        delay(50);
        digitalWrite(buzzerPin,0);
        delay(50);
    }
}

void playWelcomeTone() {
    // Play a welcome tone (you can customize this as needed)
    tone(buzzerPin, 1000, 500); // Example: 1000 Hz tone for 500 milliseconds
    delay(600);                  // Delay to distinguish between buzz and welcome tone
}

void setup() {
    Serial.begin(9600);
    pinMode(buzzerPin, OUTPUT);
    inputBuffer[0] = '\0'; // Initialize buffer with null terminator

    // Initialize LCD
    lcd.begin(); // Initialize the LCD with 16 columns and 2 rows
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Initializing...");

    WiFi.begin(ssid, password);
    Serial.println("Connecting");

    // Initialize NTPClient to get time
    timeClient.begin();
    timeClient.setTimeOffset(0);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.print("Connected to WiFi network with IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.println("Timer set to 1 minute (timerDelay variable), entering deep sleep...");

    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    timeClient.setTimeOffset(19800); // Set the time zone offset in seconds (19800 seconds = +5:30 GMT for India)

    if (WiFi.status() == WL_CONNECTED) {
        Time();
        Serial.println("Time" + String(currentDate));

        // Fetch NTP time
        Serial.println("Fetching NTP time...");
        timeClient.update();

        // Your Domain name with URL path
        Serial.println("Server URL: " + String(serverName));
    }

    // Initialize LCD with relevant info
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Press '#' to");
    lcd.setCursor(0, 1);
    lcd.print("update data");


}

void loop() {
    char key = keypad.getKey();
     id == "";
    if (key != NO_KEY ) {
        // Buzz each time a button is pressed
        buzz();

        if (key == '#') { // Check if '#' button is pressed
            if (id == "") {
                // ID is empty, take the ID
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Enter ID:");
            } else {
                // ID is not empty, update the data
                update_data(id, "ID");
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Data updated");
                delay(2000); // Delay for 2 seconds
   
              ESP.restart();

            }
        } else {
            // Append the pressed key to the input buffer if it's not '#' and buffer is not full
            if (strlen(inputBuffer) < sizeof(inputBuffer) - 1) {
                strncat(inputBuffer, &key, 1);
                lcd.print(key); // Display the pressed key on the LCD
                id += key; // Store the entered digit in the ID string
            }
        }



    }


}

String Time() {
    timeClient.update();
    time_t epochTime = timeClient.getEpochTime();

    int currentHour = timeClient.getHours();
    int currentMinute = timeClient.getMinutes();
    int currentSecond = timeClient.getSeconds();

    // Get a time structure
    struct tm *ptm = gmtime((time_t *)&epochTime);

    int monthDay = ptm->tm_mday;
    int currentMonth = ptm->tm_mon + 1;
    int currentYear = ptm->tm_year + 1900;

    currentDate = String(currentYear) + ":" + String(currentMonth) + ":" + String(monthDay) + ":" + String(currentHour) + ":" + String(currentMinute) + ":" + String(currentSecond);

    return currentDate;
}

void update_data(String id, String type) {
    // Create JSON data
    DynamicJsonDocument jsonDoc(512);
    JsonObject root = jsonDoc.to<JsonObject>();
    root["enclosure_id"] = id;
    root["type"] = type;

    JsonArray values = root.createNestedArray("values");

    JsonObject weightObj = values.createNestedObject();
    weightObj["key"] = "EGG";
    weightObj["value"] = random(1,100);
    weightObj["uom"] = "Weight";
    weightObj["event_date"] = currentDate;

    String jsonString;
    serializeJson(root, jsonString);
    Serial.println("JSON Data: " + jsonString);

    HTTPClient http;
    WiFiClient client;

    http.begin(client, serverName);
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(jsonString);
    http.end();
}
